{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AccessControlBadConfirmation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "neededRole",
						"type": "bytes32"
					}
				],
				"name": "AccessControlUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "overallScore",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "justificationIPFS",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "modelVersion",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "oracle",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "AIScoreSubmitted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "modelVersion",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "supported",
						"type": "bool"
					}
				],
				"name": "ModelSupported",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oracle",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "authorized",
						"type": "bool"
					}
				],
				"name": "OracleAuthorized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newScore",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "reason",
						"type": "string"
					}
				],
				"name": "ScoreUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint8",
								"name": "ecosystemContribution",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "feasibility",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "riskAssessment",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "teamReputation",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "innovation",
								"type": "uint8"
							}
						],
						"indexed": false,
						"internalType": "struct AIScoreRegistry.ScoringCriteria",
						"name": "newCriteria",
						"type": "tuple"
					}
				],
				"name": "ScoringCriteriaUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "AI_ORACLE_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "DISPUTE_RESOLVER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_SCORE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MILESTONE_APPROVER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MIN_SCORE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "SCORE_VALIDITY_PERIOD",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "TREASURY_MANAGER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "authorizedOracles",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "getAIScore",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "score",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "justification",
						"type": "string"
					},
					{
						"internalType": "bool",
						"name": "exists",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllRoles",
				"outputs": [
					{
						"internalType": "bytes32[]",
						"name": "roles",
						"type": "bytes32[]"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "getDetailedAIScore",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "proposalId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "overallScore",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "justificationIPFS",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "modelVersion",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "timestamp",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "oracle",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "exists",
								"type": "bool"
							},
							{
								"components": [
									{
										"internalType": "uint8",
										"name": "ecosystemScore",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "feasibilityScore",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "riskScore",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "teamScore",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "innovationScore",
										"type": "uint8"
									}
								],
								"internalType": "struct IAIScoreRegistry.ScoringBreakdown",
								"name": "breakdown",
								"type": "tuple"
							}
						],
						"internalType": "struct AIScoreRegistry.AIScoreData",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "oracle",
						"type": "address"
					}
				],
				"name": "getOracleStats",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "scoreCount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isAuthorized",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "getRoleCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "roleCount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "getScoringBreakdown",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint8",
								"name": "ecosystemScore",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "feasibilityScore",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "riskScore",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "teamScore",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "innovationScore",
								"type": "uint8"
							}
						],
						"internalType": "struct IAIScoreRegistry.ScoringBreakdown",
						"name": "breakdown",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32[]",
						"name": "roles",
						"type": "bytes32[]"
					}
				],
				"name": "grantMultipleRoles",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "hasAIScore",
				"outputs": [
					{
						"internalType": "bool",
						"name": "exists",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32[]",
						"name": "roles",
						"type": "bytes32[]"
					}
				],
				"name": "hasAnyRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "oracleScoreCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "reason",
						"type": "string"
					}
				],
				"name": "removeScore",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "callerConfirmation",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32[]",
						"name": "roles",
						"type": "bytes32[]"
					}
				],
				"name": "revokeMultipleRoles",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "scoringWeights",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "ecosystemContribution",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "feasibility",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "riskAssessment",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "teamReputation",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "innovation",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "oracle",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "authorized",
						"type": "bool"
					}
				],
				"name": "setOracleAuthorization",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "modelVersion",
						"type": "string"
					},
					{
						"internalType": "bool",
						"name": "supported",
						"type": "bool"
					}
				],
				"name": "setSupportedModel",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "overallScore",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "justificationIPFS",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "modelVersion",
						"type": "string"
					},
					{
						"components": [
							{
								"internalType": "uint8",
								"name": "ecosystemScore",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "feasibilityScore",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "riskScore",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "teamScore",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "innovationScore",
								"type": "uint8"
							}
						],
						"internalType": "struct IAIScoreRegistry.ScoringBreakdown",
						"name": "breakdown",
						"type": "tuple"
					}
				],
				"name": "submitAIScore",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"name": "supportedModels",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalScoresSubmitted",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "newScore",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "newJustificationIPFS",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "reason",
						"type": "string"
					}
				],
				"name": "updateAIScore",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint8",
								"name": "ecosystemContribution",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "feasibility",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "riskAssessment",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "teamReputation",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "innovation",
								"type": "uint8"
							}
						],
						"internalType": "struct AIScoreRegistry.ScoringCriteria",
						"name": "newCriteria",
						"type": "tuple"
					}
				],
				"name": "updateScoringCriteria",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "CrossFi Treasury Guard Team",
			"details": "Stores AI-generated scores and IPFS CIDs for proposal analysis",
			"errors": {
				"AccessControlBadConfirmation()": [
					{
						"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
					}
				],
				"AccessControlUnauthorizedAccount(address,bytes32)": [
					{
						"details": "The `account` is missing a role."
					}
				]
			},
			"events": {
				"Paused(address)": {
					"details": "Emitted when the pause is triggered by `account`."
				},
				"RoleAdminChanged(bytes32,bytes32,bytes32)": {
					"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
				},
				"RoleGranted(bytes32,address,address)": {
					"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
				},
				"RoleRevoked(bytes32,address,address)": {
					"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
				},
				"Unpaused(address)": {
					"details": "Emitted when the pause is lifted by `account`."
				}
			},
			"kind": "dev",
			"methods": {
				"getAIScore(uint256)": {
					"details": "Get AI score for a proposal",
					"params": {
						"proposalId": "The proposal ID"
					},
					"returns": {
						"exists": "Whether score exists",
						"justification": "IPFS CID for detailed analysis",
						"score": "Overall AI score"
					}
				},
				"getAllRoles()": {
					"details": "Get all available roles",
					"returns": {
						"roles": "Array of all role identifiers"
					}
				},
				"getDetailedAIScore(uint256)": {
					"details": "Get detailed AI score data",
					"params": {
						"proposalId": "The proposal ID"
					},
					"returns": {
						"_0": "Complete AI score data structure"
					}
				},
				"getOracleStats(address)": {
					"details": "Get oracle statistics",
					"params": {
						"oracle": "Oracle address"
					},
					"returns": {
						"isAuthorized": "Whether oracle is authorized",
						"scoreCount": "Number of scores submitted by oracle"
					}
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"getRoleCount(address)": {
					"details": "Get all roles for an account",
					"params": {
						"account": "Account to check"
					},
					"returns": {
						"roleCount": "Number of roles the account has"
					}
				},
				"getScoringBreakdown(uint256)": {
					"details": "Get scoring breakdown for a proposal",
					"params": {
						"proposalId": "The proposal ID"
					},
					"returns": {
						"breakdown": "Detailed scoring breakdown"
					}
				},
				"grantMultipleRoles(address,bytes32[])": {
					"details": "Grant multiple roles to an account",
					"params": {
						"account": "Account to grant roles to",
						"roles": "Array of role identifiers"
					}
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
				},
				"hasAIScore(uint256)": {
					"details": "Check if AI score exists for a proposal",
					"params": {
						"proposalId": "The proposal ID"
					},
					"returns": {
						"exists": "Whether score exists"
					}
				},
				"hasAnyRole(address,bytes32[])": {
					"details": "Check if account has any of the specified roles",
					"params": {
						"account": "Account to check",
						"roles": "Array of role identifiers"
					},
					"returns": {
						"_0": "hasAnyRole True if account has at least one of the roles"
					}
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"removeScore(uint256,string)": {
					"details": "Emergency function to remove invalid score",
					"params": {
						"proposalId": "The proposal ID",
						"reason": "Reason for removal"
					}
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
				},
				"revokeMultipleRoles(address,bytes32[])": {
					"details": "Revoke multiple roles from an account",
					"params": {
						"account": "Account to revoke roles from",
						"roles": "Array of role identifiers"
					}
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
				},
				"setOracleAuthorization(address,bool)": {
					"details": "Authorize or deauthorize an AI oracle",
					"params": {
						"authorized": "Authorization status",
						"oracle": "Oracle address"
					}
				},
				"setSupportedModel(string,bool)": {
					"details": "Add or remove supported AI model",
					"params": {
						"modelVersion": "Model version string",
						"supported": "Whether model is supported"
					}
				},
				"submitAIScore(uint256,uint256,string,string,(uint8,uint8,uint8,uint8,uint8))": {
					"details": "Submit AI-generated score for a proposal",
					"params": {
						"breakdown": "Detailed scoring breakdown",
						"justificationIPFS": "IPFS CID containing detailed analysis",
						"modelVersion": "AI model version used",
						"overallScore": "Overall AI score (0-100)",
						"proposalId": "The proposal ID"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
				},
				"updateAIScore(uint256,uint256,string,string)": {
					"details": "Update existing AI score (only within validity period)",
					"params": {
						"newJustificationIPFS": "New IPFS CID for updated analysis",
						"newScore": "New overall score",
						"proposalId": "The proposal ID",
						"reason": "Reason for score update"
					}
				},
				"updateScoringCriteria((uint8,uint8,uint8,uint8,uint8))": {
					"details": "Update scoring criteria weights",
					"params": {
						"newCriteria": "New scoring criteria"
					}
				}
			},
			"title": "AIScoreRegistry",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"CrossFi-Treasury-Guard/contracts/AIScoreRegistry.sol": "AIScoreRegistry"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"@openzeppelin/contracts/access/AccessControl.sol": {
			"keccak256": "0x1a6b4f6b7798ab80929d491b89d5427a9b3338c0fd1acd0ba325f69c6f1646af",
			"license": "MIT",
			"urls": [
				"bzz-raw://7bb7f346c12a14dc622bc105ce3c47202fbc89f4b153a28a63bb68193297330c",
				"dweb:/ipfs/QmagwF8P3bUBXwdo159ueEnY9dLSvEWwK24kk2op58egwG"
			]
		},
		"@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c",
			"license": "MIT",
			"urls": [
				"bzz-raw://b308f882e796f7b79c9502deacb0a62983035c6f6f4e962b319ba6a1f4a77d3d",
				"dweb:/ipfs/QmaWCW7ahEQqFjwhSUhV7Ae7WhfNvzSpE7DQ58hvEooqPL"
			]
		},
		"@openzeppelin/contracts/security/Pausable.sol": {
			"keccak256": "0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ddabb16009cd17eaca3143feadf450ac13e72919ebe2ca50e00f61cb78bc004",
				"dweb:/ipfs/QmSPwPxX7d6TTWakN5jy5wsaGkS1y9TW8fuhGSraMkLk2B"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x2d9dc2fe26180f74c11c13663647d38e259e45f95eb88f57b61d2160b0109d3e",
			"license": "MIT",
			"urls": [
				"bzz-raw://81233d1f98060113d9922180bb0f14f8335856fe9f339134b09335e9f678c377",
				"dweb:/ipfs/QmWh6R35SarhAn4z2wH8SU456jJSYL2FgucfTFgbHJJN4E"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c",
			"license": "MIT",
			"urls": [
				"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617",
				"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u"
			]
		},
		"CrossFi-Treasury-Guard/contracts/AIScoreRegistry.sol": {
			"keccak256": "0x0ee26ac494c1988dd2d6e0d1bf4e9958c1f6071ebe582d9dbd54e0b9b9dc1f09",
			"license": "MIT",
			"urls": [
				"bzz-raw://b9baf8f4b005ae29df38f8c7a7c5230ac77b8fd8fb92a748932513f9b145e354",
				"dweb:/ipfs/QmPDwc8CssF4d4oRsg6MgbWxrm7Xt22MG8FqEQsTksMYKw"
			]
		},
		"CrossFi-Treasury-Guard/contracts/interfaces/IAIScoreRegistry.sol": {
			"keccak256": "0xb36aceb50a3c334f727f77bbd2f6660b3a7f48226a1cc73c6b4273f03c1c6b17",
			"license": "MIT",
			"urls": [
				"bzz-raw://0b080c589ae5af3faf1a2a218267478d86dc5408b674e696f4a9a5b617ac46ff",
				"dweb:/ipfs/QmaYY5xJZHYqg7KPdB25pTZyYnhcDrN3miPVTTUE38tvJS"
			]
		},
		"CrossFi-Treasury-Guard/contracts/utils/ExtendedAccessControl.sol": {
			"keccak256": "0x8b7cd81ef25f52c2cdffb0879b4c8d953d671eef13fa1ebdda28c0c2e16c52da",
			"license": "MIT",
			"urls": [
				"bzz-raw://bc0018431667094cdb37883ffc7417dfd2c552844692f1340143f4e7e4b903f3",
				"dweb:/ipfs/QmPdnh9tbMBQCaazQ2fzbQSKKxkERU75TcSDZ9KVfDhujb"
			]
		}
	},
	"version": 1
}